server:
  port: 9000
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
  shutdown: graceful

spring:
  application:
    name: edge-service
  lifecycle:
    timeout-per-shutdown-phase: 15s
  data:
    redis: #여러 인스턴스가 있을 떄 사용자의 요청을 제한하기 위해 요청기록을 보관(모든 인스턴스가 사용)
      host: localhost # 클라이언트의 속도제한을 위해 사용!!!
      port: 6379
      timeout: 1s
  session: # 스프링 세션 설정(레디스)
    store-type: redis
    timeout: 10m
    redis:
      namespace: polar:edge
  security:
    oauth2:
      client:
        registration:
          keycloak: # security에서 클라우드 등록을 식별하는 이름
            client-id: edge-service # keycloak에 정의된 oauth2 클라이언트 식별자
            client-secret: polar-keycloak-secret
            scope: openid
        provider:
          keycloak:
            issuer-uri: http://localhost:8080/realms/PolarBookshop # 특정 영역에 oauth2, oidc 관련 엔드포인드를 알려주는 url
  cloud:
    gateway:
      server:
        webflux:
          routes:
            - id: catalog-route
              uri: ${CATALOG_SERVICE_URL:http://localhost:9001}/books
              predicates:
                - Path=/books/**
              filters: # 서킷 브레이커 필터 추가
                - name: CircuitBreaker
                  args:
                    name: catalogCircuitBreaker
                    fallbackUri: forward:/catalog-fallback # 회로개 개방(장애상황)되었을 떄 이 URI로 전달
            - id: order_route
              uri: ${ORDER_SERVICE_URL:http://localhost:9002}/orders
              predicates:
                - Path=/orders/**
              filters:
                - name: CircuitBreaker
                  args:
                    name: orderCircuitBreaker

          httpclient:
            connect-timeout: 2000
            response-timeout: 5s
            pool:
              type: elastic
              max-idle-time: 15s
              max-life-time: 60s
          default-filters:
            - SaveSession # 요청을 서비스로 전달하기 전에 세션 데이터 저장
            - name: RequestRateLimiter
              args: # 버킷은 서버측 속도 제한을 위해 사용
                redis-rate-limiter: # 토큰 버킷 알고리즘으로 사용자의 요청수를 제한(버켓에 토큰이 있는 경우에만 사용자 요청 가능)
                  replenishRate: 10 # 초당 버킷에 떨어지는 토큰 수
                  burstCapacity: 20 # 최대 20개 요청까지 허용
                  requestedTokens: 1 # 하나의 요청에 사용되는 토큰 수
            - name: Retry
              args:
                retries: 3
                methods: GET
                series: SERVER_ERROR
                exceptions: java.io.IOException, java.util.concurrent.TimeoutException
#                backoff: 재시도할 시간을 조절하는 공식
#                  first-backoff: 50ms
#                  maxBackOff: 500ms
#                  factor: 2
#                  basedOnPreviousValue: false

resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 20 # 회고가 폐쇄(정상)상태일 때 호출 결과를 기록하는 윈도 크기
        permittedNumberOfCallsInHalfOpenState: 5 # 반개방 상태에서의 윈도 사이즈
        failureRateThreshold: 50 # 개방상태로 바뀌는 실패율 임계값 설정
        waitDurationInOpenState: 15000 # 개방에서 반개방 상태로 바꾸기 전 기다리는 시간
  timelimiter: # 외부 서비스 호출이나 비동기 작업에 대해 최대 실행 시간을 제한
    configs:
      default: # 모든 시간 제한에 대한 기본 설정
        timeoutDuration: 5s
logging:
  level:
    io.github.resilience4j: DEBUG