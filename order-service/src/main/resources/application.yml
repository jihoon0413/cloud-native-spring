server:
  port: 9002
  shutdown: graceful
  netty:
    connection-timeout: 2s
    idle-timeout: 15s # 데이터가 전송되지 않는 경우 tcp연결을 닫기 전에 기다리는 시간

spring:
  application:
    name: order-service
  lifecycle:
    timeout-per-shutdown-phase: 15s # 15초간 우아한 종료 기간 정의
  config:
    import: "optional:configserver:" # 가능하면 서버에서 설정 데이터를 가져오도록 설정 -> 설정 서버가 동작하지 않았도 애플리케이션이 동작할 수 있도록 설정
  security:
    oauth2:
      resourceserver:
        jwt: # 어떤 형식을 검증할지 지정
          issuer-uri: http://localhost:8080/realms/PolarBookshop # JWT 토큰의 발행자, JWT 토큰의 iss 클레임과 일치해야 하는 URL로, 리소스 서버가 JWT 토큰의 유효성과 신뢰성을 검증하는 데 필수적
  cloud:
    config:
      uri: http://localhost:8888 # 설정 서버의 url주소
      request-connect-timeout: 5000 # 설정 서버에 연결될 때까지 최대로 기다리는 시간
      request-read-timeout: 5000 # 설정 서버에서 데이터를 읽을 떄까지 최대로 기다리는 시간
      fail-fast: false # 설정 서버 연결 실패를 심각한 실패로 간주
      retry: # 심각한 실패(fail-fast: true)일 경우만 retry가 활성화 된다.
        max-attempts: 6 # 최대 시도 횟수
        initial-interval: 1000 # 최초 재시도 지연 시간
        max-interval: 2000 # 재시도 지연 최대 시간
        multiplier: 1.1 # 지연 시간 계산 승수
    function:
      definition: dispatchOrder
    stream:
      bindings:
        dispatchOrder-in-0:
          destination: order-dispatched
          group: ${spring.application.name}
        acceptedOrder-out-0:
          destination: order-accepted
      rabbit:
        bindings:
          acceptOrder-out-0:
            producer:
              transacted: true  # 트렌잭션 지원 활성화
  rabbitmq:
    host: localhost
    port: 5672
    username: user
    password: password
    connection-timeout: 5s
  r2dbc:
    username: user
    password: password
    url: r2dbc:postgresql://localhost:5432/polardb_order
    pool:
      max-create-connection-time: 2s
      initial-size: 5
      max-size: 10
  flyway: # R2DBC에 대한 설정을 JDBC로 flyway에 연결
    user: ${spring.r2dbc.username}
    password: ${spring.r2dbc.password}
    url: jdbc:postgresql://localhost:5432/polardb_order

polar:
  catalog-service-uri: "http://localhost:9001"