plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.polarbookshop'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2025.0.0") // 사용할 스프링 클라우드 버전
	set('testcontainersVersion', "1.19.8") // 사용할 테스트컨테이너 버전
	set('testKeycloakVersion', "3.3.1")
	set('otelVersion', "1.33.3")

}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.retry:spring-retry'
	implementation 'org.springframework.cloud:spring-cloud-stream-binder-rabbit' //스프링 클라우드 스트림 rabbitmq
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server' // order, catalog 서비스는 리소스 서버
	// 리소스를 edge-service라는 사용자, 서버 외의 3자가 요청하기 때문에 edge에서 보내는 jwt를 검증하기 위해 사용


	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'org.postgresql:r2dbc-postgresql'
	runtimeOnly 'org.flywaydb:flyway-core'
	runtimeOnly 'org.flywaydb:flyway-database-postgresql'
	runtimeOnly 'org.springframework:spring-jdbc'
	runtimeOnly "io.opentelemetry.javaagent:opentelemetry-javaagent:${otelVersion}"

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'  // 메타데이터가 자동으로 생성되어, 속성의 자동 완성 및 유형 검사가 가능함

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation "com.github.dasniko:testcontainers-keycloak:${testKeycloakVersion}"
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
	testImplementation 'org.testcontainers:r2dbc'
	testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.3'// 모의 웹 서버를 실행하는 유틸리티
	testImplementation 'org.springframework.cloud:spring-cloud-stream-test-binder' // 바인더 통합 테스트
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"  // 스프링 클라우드 의존성 관리를 위한 BOM(Bill of Material)
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"  // 컨테이너 의존성 관리를 위한 BOM

	}
}

springBoot {
	buildInfo() //빌드 정보를 info가 붙은 객체로 만드는 느낌
}

bootBuildImage {  // 빌드팩을 사용해 OCI 이미지를 빌드하기 위한 플러그인 작엄(패키토)
	imageName= "${project.name}"
	environment = ["BP_JVM_VERSION" : "17.*"]

	docker {// 컨테이너 저장소 연결을 설정하기 위한 섹션
		publishRegistry {// 컨테이너 저장소 인증을 설정하기 위한 섹션, 값음 그래들을 통해 전달됨
			username = project.findProperty("registryUsername")
			password = project.findProperty("registryToken")
			url = project.findProperty("registryUrl")
			// 이 정보들을 --publishImage에 활용하여 허브에 자동으로 저장할 수 있음
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
