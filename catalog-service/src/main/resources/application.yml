server:
  port: 9001
  shutdown: graceful # 우아한 종료 활성화(서버가 종료돼도 일정 시간 동안 요청을 받음)
  tomcat:
    connection-timeout: 2s  # Time to wait for TCP (3-way handshake) link
    keep-alive-timeout: 15s # Time to wait for the next request since the last response
    threads:
      max: 50
      min-spare: 5

spring:
  application:
    name: catalog-service # 설정 저장소에서 가져오고 싶은 파일의 이름을 작성
  lifecycle:
    timeout-per-shutdown-phase: 15s # 우아한 종료 기간
  config:
    import: "optional:configserver:" # 가능하면 서버에서 설정 데이터를 가져오도록 설정 -> 설정 서버가 동작하지 않았도 애플리케이션이 동작할 수 있도록 설정
  cloud:
    config:
      uri: http://localhost:8888 # 설정 서버의 url주소
      request-connect-timeout: 5000 # 설정 서버에 연결될 때까지 최대로 기다리는 시간
      request-read-timeout: 5000 # 설정 서버에서 데이터를 읽을 떄까지 최대로 기다리는 시간
      fail-fast: false # 설정 서버 연결 실패를 심각한 실패로 간주
      retry: # 심각한 실패(fail-fast: true)일 경우만 retry가 활성화 된다.
        max-attempts: 6 # 최대 시도 횟수
        initial-interval: 1000 # 최초 재시도 지연 시간
        max-interval: 2000 # 재시도 지연 최대 시간
        multiplier: 1.1 # 지연 시간 계산 승수
  datasource:
    username: user
    password: password
    url: jdbc:postgresql://localhost:5432/polardb_catalog
    hikari: # 연결 재상용을 위한 연결 폴링의 한 종류
      connection-timeout: 2000 # 풀에서 연결 객체를 얻기 위해 기다리는 최대 시간
      maximum-pool-size: 5 # 히카리가 풀에서 유지할 수 있는 최대 연결 객체 수
  security:
    oauth2:
      resourceserver:
        jwt: # access token의 형식을 jwt와 opaque 중에 선택
          issuer-uri: http://localhost:8080/realms/PolarBookshop # 토큰을 받아올 주소

logging:
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

management:
  endpoints:
    web:
      exposure:
        include: configprops, env, flyway, health, heapdump, info, loggers, mappings, prometheus # http를 통해 /actuator/refresh 엔트포인트 노출
  endpoint:
    health:
      show-details: always # 애플리케이션의 상세한 정보를 보기 위한 설정
      show-components: always # 구성 요소에 대한 정보를 보기 위한 설정
      probes:
        enabled: true # 상태 프로브 활성화 활성, 준비 상태 반환
  metrics:
    tags: # 애플리케이션 이름으로 마이크로미터 공통 태그 설정 -> 모든 메트릭에 적용되는 프로메테우스 레이블이 만들어짐
      application: ${spring.application.name}

polar:
  greeting: Welcome to the local book catalog!