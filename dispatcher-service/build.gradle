plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.polarbookshop'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2025.0.0")
	set('otelVersion', "1.33.3")
}

dependencies {
//	implementation 'org.springframework.boot:spring-boot-starter'
//	implementation 'org.springframework.cloud:spring-cloud-function-context'

	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.cloud:spring-cloud-stream-binder-rabbit'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	runtimeOnly "io.opentelemetry.javaagent:opentelemetry-javaagent:${otelVersion}"

	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.cloud:spring-cloud-stream-test-binder'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

springBoot {
	buildInfo() //빌드 정보를 info가 붙은 객체로 만드는 느낌
}

bootBuildImage {  // 빌드팩을 사용해 OCI 이미지를 빌드하기 위한 플러그인 작엄(패키토)
	imageName= "${project.name}"
	environment = ["BP_JVM_VERSION" : "17.*"]

//	docker {// 컨테이너 저장소 연결을 설정하기 위한 섹션
//		publishRegistry {// 컨테이너 저장소 인증을 설정하기 위한 섹션, 값음 그래들을 통해 전달됨
//			username = project.findProperty("registryUsername")
//			password = project.findProperty("registryToken")
//			url = project.findProperty("registryUrl")
//			// 이 정보들을 --publishImage에 활용하여 허브에 자동으로 저장할 수 있음
//		}
//	}
}

tasks.named('test') {
	useJUnitPlatform()
}
